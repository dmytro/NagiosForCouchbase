---
# Description of the format
# =========================
# See README.md file
#
default: &default
  :namespace: Wizcorp::Couchbase
  :class: BucketStats
  :function: :avg               # :avg, :sum, :none
  :operator: :>                 # Can be :>, :< ,:==, :!=
  :rag: [0,0,0]                 # order Red, Amber, Green
  #
  # Use this check only if bucket type is as specified. By default
  # it's not used.
  #
  # :only_if: membase | memcached 
  # 

# Checks for values that should be close to or 0 most of the times.
zero_10: &zero_10
  <<: *default
  :rag:  [20, 10, -1]

# Check values that under normal conditions are 0's

zero: &zero
  <<: *default
  :operator: :>=
  :rag: [0.001,0.001,0]

# ======================
# END of defaults
# ======================

#
# Actual checks are grouped under [checks] subtree.
#
checks:
  :ep_tap_replica_queue_backfillremaining:
    <<: *zero_10

  :ep_tap_total_qlen:
    <<: *zero_10

  :vb_active_queue_size:
    <<: *default
    :rag: [100,80,-1]

  :vb_replica_queue_size:
    <<: *default
    :rag: [100,80,-1]

  :avg_disk_commit_time:
    <<: *default
    :rag: [50,40,0]
    :only_if: membase

  :ep_tap_total_queue_drain:
    <<: *default
    :rag: [100,80,-1]

  :ep_tap_total_queue_backoff:
    <<: *default
    :rag: [50,10,-1]

  :ep_tap_total_queue_itemondisk:
    <<: *default
    :rag: [50,10,-1]
    :only_if: membase

  :ep_tap_replica_queue_itemondisk:
    <<: *default
    :rag: [50,10,-1]
    :only_if: membase

  # vb_active_resident_items_ratio - Percentage of active items cached in RAM in this bucket.
  #
  # Working set should fit in memory. If speed access to the data is
  # the main concern, RED should be set to 100%. Any memory shourt
  # situation will be reported.
  :vb_active_resident_items_ratio:
    <<: *default
    :operator: :<
    :rag: [100,100,101]
    :only_if: membase

  # vb_active_num - Number of vBuckets in the "active" state for this
  # bucket (measured from vb_active_num) === 1024
  #
  # Under normal conditions always should be 1024
  :vb_active_num:               # Number of active vBuckets
    <<: *default
    :operator: :<
    :rag: [1024,1024,1025]

  # ep_tmp_oom_errors : Number of back-offs sent per second to drivers
  # due to "out of memory" situations from this bucket (measured from
  # ep_tmp_oom_errors) === 0
  #
  # should be zero
  :ep_tmp_oom_errors:
    <<: *zero


  :vb_active_curr_items:        # Number of in memory items
    <<: *default
    :operator: :>
    :rag: [0,0,-1]

    #   :vb_active_num_non_resident:  # Number of non-resident items
    #     <<: *default
    #     :operator: :>
    #     :rag: [0,0,-1]

  :vb_active_perc_mem_resident: #   % memory resident 
    <<: *default
    :operator: :<
    :rag: [100,100,101]

  :vb_active_eject:          # Number of times item values got ejected
    <<: *zero

    #   :vb_active_expired:        # Number of times an item was expired
    #     <<: *default
    #     :operator: :<
    #     :rag: [100,100,101]

  :vb_active_ht_memory:      # Memory overhead of the hashtable
    <<: *default
    :operator: :<
    :rag: [100,100,101]

    # Depends on cluster size
    #
    #   :vb_active_itm_memory:     # Total item memory
    #     <<: *default
    #     :operator: :>
    #     :rag: [0,0,0]
    
    # Depends on cluster size
    #
    #   :vb_active_meta_data_memory:  # Total metadata memory
    #     <<: *default
    #     :operator: :>
    #     :rag: [0,0,0]
    
  # Need tuning
  :vb_active_ops_create:        # Number of create operations
    <<: *default
    :rag: [20000,10000,0]

  :vb_active_ops_update:        # Number of update operations
    <<: *default
    :rag: [20000,10000,0]       # Need tuning

  :vb_active_ops_delete:        # Number of delete operations
    <<: *default
    :rag: [20000,10000,0]       # Need tuning

  :vb_active_ops_reject:        # Number of rejected operations
    <<: *default
    :rag: [20000,10000,0]       # Need tuning

  :vb_active_queue_size:        # Active items in disk queue
    <<: *default
    :rag: [20000,10000,0]       # Need tuning

  :vb_active_queue_memory:      # Memory used for disk queue
    <<: *default
    :rag: [20000,10000,0]       # Need tuning

  :vb_active_queue_age:         # Sum of disk queue item age in milliseconds
    <<: *default
    :rag: [20000,10000,0]       # Need tuning

  :vb_active_queue_pending:     # Total bytes of pending writes
    <<: *default
    :rag: [20000,10000,0]       # Need tuning

  :vb_active_queue_fill:        # Total enqueued items
    <<: *default
    :rag: [20000,10000,0]       # Need tuning

  :vb_active_queue_drain:       # Total drained items
    <<: *default
    :rag: [20000,10000,0]       # Need tuning

  :vb_active_num_ref_items:     # Number of referenced items
    <<: *default
    :rag: [20000,10000,0]       # Need tuning

  :vb_active_num_ref_ejects:    # Number of times referenced item values got ejected
    <<: *default
    :rag: [20000,10000,0]       # Need tuning

  :vb_pending_num:              # Number of pending vBuckets
    <<: *default
    :rag: [20000,10000,0]       # Need tuning

  :vb_pending_curr_items:       # Number of in memory items
    <<: *default
    :rag: [20000,10000,0]       # Need tuning

  :vb_pending_num_non_resident:  # Number of non-resident items
    <<: *default
    :rag: [20000,10000,0]       # Need tuning

  :vb_pending_perc_mem_resident: # % of memory used for resident items
    <<: *default
    :rag: [20000,10000,0]       # Need tuning

  :vb_pending_eject:         # Number of times item values got ejected
    <<: *default
    :rag: [20000,10000,0]       # Need tuning

  :vb_pending_expired:       # Number of times an item was expired
    <<: *default
    :rag: [20000,10000,0]       # Need tuning

  :vb_pending_ht_memory:     # Memory overhead of the hashtable
    <<: *default
    :rag: [20000,10000,0]       # Need tuning

  :vb_pending_itm_memory:    # Total item in memory
    <<: *default
    :rag: [20000,10000,0]       # Need tuning

  :vb_pending_meta_data_memory: # Total metadata memory
    <<: *default
    :rag: [20000,10000,0]       # Need tuning

  :vb_pending_ops_create:       # Number of create operations
    <<: *default
    :rag: [20000,10000,0]       # Need tuning

  :vb_pending_ops_update:       # Number of update operations
    <<: *default
    :rag: [20000,10000,0]       # Need tuning

  :vb_pending_ops_delete:       # Number of delete operations
    <<: *default
    :rag: [20000,10000,0]       # Need tuning

  :vb_pending_ops_reject:       # Number of rejected operations
    <<: *default
    :rag: [20000,10000,0]       # Need tuning

  :vb_pending_queue_size:       # Pending items in disk queue
    <<: *default
    :rag: [20000,10000,0]       # Need tuning

  :vb_pending_queue_memory:     # Memory used for disk queue
    <<: *default
    :rag: [20000,10000,0]       # Need tuning

  :vb_pending_queue_age:  # Sum of disk queue item age in milliseconds
    <<: *default
    :rag: [20000,10000,0]       # Need tuning

  :vb_pending_queue_pending:    # Total bytes of pending writes
    <<: *default
    :rag: [20000,10000,0]       # Need tuning

  :vb_pending_queue_fill:       # Total enqueued items
    <<: *default
    :rag: [20000,10000,0]       # Need tuning

  :vb_pending_queue_drain:      # Total drained items
    <<: *default
    :rag: [20000,10000,0]       # Need tuning

  :vb_pending_num_ref_items:    # Number of referenced items
    <<: *default
    :rag: [20000,10000,0]       # Need tuning

  :vb_pending_num_ref_ejects: # Number of times referenced item values got ejected
    <<: *default
    :rag: [20000,10000,0]       # Need tuning

  

# TODO
#
# Diff: High water mark for auto-evictions (measured from ep_mem_high_wat)
#       Memory used as measured from mem_used
